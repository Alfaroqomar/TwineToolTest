{
  "version": 3,
  "sources": ["../../tabbable/src/index.js", "../../focus-trap/index.js", "../../focus-trap-react/dist/focus-trap-react.js"],
  "sourcesContent": ["const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]:not(slot)',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n  'details>summary:first-of-type',\n  'details',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element.getRootNode()\n    : (element) => element.ownerDocument;\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidatesScope\n * @property {Element} scope contains inner candidates\n * @property {Element[]} candidates\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidatesScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidatesScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scope: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      const validShadowRoot =\n        !options.shadowRootFilter || options.shadowRootFilter(element);\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scope: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\nconst getTabindex = function (node, isScope) {\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    //\n    // isScope is positive for custom element with shadow root or slot that by default\n    // have tabIndex -1, but need to be sorted by document order in order for their\n    // content to be inserted in the correct position\n    if (\n      (isScope ||\n        /^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        node.isContentEditable) &&\n      isNaN(parseInt(node.getAttribute('tabindex'), 10))\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  const nodeRootHost = getRootNode(node).host;\n  const nodeIsAttached =\n    nodeRootHost?.ownerDocument.contains(nodeRootHost) ||\n    node.ownerDocument.contains(node);\n\n  if (!displayCheck || displayCheck === 'full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (nodeIsAttached) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck` mode\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabindex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidatesScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scope;\n    const element = isScope ? item.scope : item;\n    const candidateTabindex = getTabindex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (el, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([el], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot,\n    });\n  } else {\n    candidates = getCandidates(\n      el,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable };\n", "import { tabbable, focusable, isFocusable, isTabbable } from 'tabbable';\n\nconst activeFocusTraps = (function () {\n  const trapQueue = [];\n  return {\n    activateTrap(trap) {\n      if (trapQueue.length > 0) {\n        const activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap(trap) {\n      const trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    },\n  };\n})();\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nconst findIndex = function (arr, fn) {\n  let idx = -1;\n\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element) {\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  const getNodeForOption = function (optionName, ...params) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\n          `\\`${optionName}\\` as selector refers to no known node`\n        );\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode:\n          tabbableNodes.length > 0\n            ? tabbableNodes[tabbableNodes.length - 1]\n            : null,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          const nodeIdx = focusableNodes.findIndex((n) => n === node);\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n\n          if (forward) {\n            return focusableNodes\n              .slice(nodeIdx + 1)\n              .find((n) => isTabbable(n, config.tabbableOptions));\n          }\n\n          return focusableNodes\n            .slice(0, nodeIdx)\n            .reverse()\n            .find((n) => isTabbable(n, config.tabbableOptions));\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === doc.activeElement) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // if, on deactivation, we should return focus to the node originally-focused\n        //  when the trap was activated (or the configured `setReturnFocus` node),\n        //  then assume it's also OK to return focus to the outside node that was\n        //  just clicked, causing deactivation, as long as that node is focusable;\n        //  if it isn't focusable, then return focus to the original node focused\n        //  on activation (or the configured `setReturnFocus` node)\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked, whether it's focusable or not; by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node)\n        returnFocus:\n          config.returnFocusOnDeactivate &&\n          !isFocusable(target, config.tabbableOptions),\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  const checkFocusIn = function (e) {\n    const target = getActualTarget(e);\n    const targetContained = findContainerIndex(target) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkTab = function (e) {\n    const target = getActualTarget(e);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back in to...\n        if (e.shiftKey) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (e.shiftKey) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = findIndex(\n          state.tabbableGroups,\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.firstTabbableNode;\n        }\n      }\n    } else {\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    if (destinationNode) {\n      e.preventDefault();\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkKey = function (e) {\n    if (\n      isEscapeEvent(e) &&\n      valueOrHandler(config.escapeDeactivates, e) !== false\n    ) {\n      e.preventDefault();\n      trap.deactivate();\n      return;\n    }\n\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false,\n    });\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n\n      if (onActivate) {\n        onActivate();\n      }\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        if (onPostActivate) {\n          onPostActivate();\n        }\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n\n      activeFocusTraps.deactivateTrap(trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      if (onDeactivate) {\n        onDeactivate();\n      }\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          if (onPostDeactivate) {\n            onPostDeactivate();\n          }\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause() {\n      if (state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = true;\n      removeListeners();\n\n      return this;\n    },\n\n    unpause() {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n\n      state.paused = false;\n      updateTabbableNodes();\n      addListeners();\n\n      return this;\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      return this;\n    },\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n", "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar React = require('react');\n\nvar ReactDOM = require('react-dom');\n\nvar PropTypes = require('prop-types');\n\nvar _require = require('focus-trap'),\n    createFocusTrap = _require.createFocusTrap;\n\nvar _require2 = require('tabbable'),\n    isFocusable = _require2.isFocusable; // TODO: These issues are related to older React features which we'll likely need\n//  to fix in order to move the code forward to the next major version of React.\n//  @see https://github.com/davidtheclark/focus-trap-react/issues/77\n\n/* eslint-disable react/no-find-dom-node */\n\n\nvar FocusTrap = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusTrap, _React$Component);\n\n  var _super = _createSuper(FocusTrap);\n\n  function FocusTrap(props) {\n    var _this;\n\n    _classCallCheck(this, FocusTrap);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getNodeForOption\", function (optionName) {\n      var _this$internalOptions;\n\n      // use internal options first, falling back to original options\n      var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n\n      if (typeof optionValue === 'function') {\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n\n        optionValue = optionValue.apply(void 0, params);\n      }\n\n      if (optionValue === true) {\n        optionValue = undefined; // use default value\n      }\n\n      if (!optionValue) {\n        if (optionValue === undefined || optionValue === false) {\n          return optionValue;\n        } // else, empty string (invalid), null (invalid), 0 (invalid)\n\n\n        throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n      }\n\n      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n      if (typeof optionValue === 'string') {\n        var _this$getDocument;\n\n        node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n\n        if (!node) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n      }\n\n      return node;\n    });\n\n    _this.handleDeactivate = _this.handleDeactivate.bind(_assertThisInitialized(_this));\n    _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_assertThisInitialized(_this));\n    _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_assertThisInitialized(_this)); // focus-trap options used internally when creating the trap\n\n    _this.internalOptions = {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      returnFocusOnDeactivate: false,\n      // the rest of these are also related to deactivation of the trap, and we\n      //  need to use them and control them as well\n      checkCanReturnFocus: null,\n      onDeactivate: _this.handleDeactivate,\n      onPostDeactivate: _this.handlePostDeactivate,\n      // we need to special-case this setting as well so that we can know if we should\n      //  NOT return focus if the trap gets auto-deactivated as the result of an\n      //  outside click (otherwise, we'll always think we should return focus because\n      //  of how we manage that flag internally here)\n      clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n    }; // original options provided by the consumer\n\n    _this.originalOptions = {\n      // because of the above `internalOptions`, we maintain our own flag for\n      //  this option, and default it to `true` because that's focus-trap's default\n      returnFocusOnDeactivate: true,\n      // because of the above `internalOptions`, we keep these separate since\n      //  they're part of the deactivation process which we configure (internally) to\n      //  be shared between focus-trap and focus-trap-react\n      onDeactivate: null,\n      onPostDeactivate: null,\n      checkCanReturnFocus: null,\n      // the user's setting, defaulted to false since focus-trap defaults this to false\n      clickOutsideDeactivates: false\n    };\n    var focusTrapOptions = props.focusTrapOptions;\n\n    for (var optionName in focusTrapOptions) {\n      if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n        continue;\n      }\n\n      if (optionName === 'returnFocusOnDeactivate' || optionName === 'onDeactivate' || optionName === 'onPostDeactivate' || optionName === 'checkCanReturnFocus' || optionName === 'clickOutsideDeactivates') {\n        _this.originalOptions[optionName] = focusTrapOptions[optionName];\n        continue; // exclude from internalOptions\n      }\n\n      _this.internalOptions[optionName] = focusTrapOptions[optionName];\n    } // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n    //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n    //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n    //  function) whether to allow or deny auto-deactivation on click on this outside node\n\n\n    _this.outsideClick = null; // elements from which to create the focus trap on mount; if a child is used\n    //  instead of the `containerElements` prop, we'll get the child's related\n    //  element when the trap renders and then is declared 'mounted'\n\n    _this.focusTrapElements = props.containerElements || []; // now we remember what the currently focused element is, not relying on focus-trap\n\n    _this.updatePreviousElement();\n\n    return _this;\n  }\n  /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */\n\n\n  _createClass(FocusTrap, [{\n    key: \"getDocument\",\n    value: function getDocument() {\n      // SSR: careful to check if `document` exists before accessing it as a variable\n      return this.props.focusTrapOptions.document || (typeof document !== 'undefined' ? document : undefined);\n    }\n    /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */\n\n  }, {\n    key: \"getReturnFocusNode\",\n    value: function getReturnFocusNode() {\n      var node = this.getNodeForOption('setReturnFocus', this.previouslyFocusedElement);\n      return node ? node : node === false ? false : this.previouslyFocusedElement;\n    }\n    /** Update the previously focused element with the currently focused element. */\n\n  }, {\n    key: \"updatePreviousElement\",\n    value: function updatePreviousElement() {\n      var currentDocument = this.getDocument();\n\n      if (currentDocument) {\n        this.previouslyFocusedElement = currentDocument.activeElement;\n      }\n    }\n  }, {\n    key: \"deactivateTrap\",\n    value: function deactivateTrap() {\n      // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n      //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n      //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n      //  will initiate its auto-deactivation process, which will call our own\n      //  handleDeactivate(), which will call into this method\n      if (!this.focusTrap || !this.focusTrap.active) {\n        return;\n      }\n\n      this.focusTrap.deactivate({\n        // NOTE: we never let the trap return the focus since we do that ourselves\n        returnFocus: false,\n        // we'll call this in our own post deactivate handler so make sure the trap doesn't\n        //  do it prematurely\n        checkCanReturnFocus: null,\n        // let it call the user's original deactivate handler, if any, instead of\n        //  our own which calls back into this function\n        onDeactivate: this.originalOptions.onDeactivate // NOTE: for post deactivate, don't specify anything so that it calls the\n        //  onPostDeactivate handler specified on `this.internalOptions`\n        //  which will always be our own `handlePostDeactivate()` handler, which\n        //  will finish things off by calling the user's provided onPostDeactivate\n        //  handler, if any, at the right time\n        // onPostDeactivate: NOTHING\n\n      });\n    }\n  }, {\n    key: \"handleClickOutsideDeactivates\",\n    value: function handleClickOutsideDeactivates(event) {\n      // use consumer's option (or call their handler) as the permission or denial\n      var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === 'function' ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n      : this.originalOptions.clickOutsideDeactivates; // boolean\n\n      if (allowDeactivation) {\n        // capture the outside target that was clicked so we can use it in the deactivation\n        //  process since the consumer allowed it to cause auto-deactivation\n        this.outsideClick = {\n          target: event.target,\n          allowDeactivation: allowDeactivation\n        };\n      }\n\n      return allowDeactivation;\n    }\n  }, {\n    key: \"handleDeactivate\",\n    value: function handleDeactivate() {\n      if (this.originalOptions.onDeactivate) {\n        this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n      }\n\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"handlePostDeactivate\",\n    value: function handlePostDeactivate() {\n      var _this2 = this;\n\n      var finishDeactivation = function finishDeactivation() {\n        var returnFocusNode = _this2.getReturnFocusNode();\n\n        var canReturnFocus = !!( // did the consumer allow it?\n        _this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n        returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && ( // was there an outside click that allowed deactivation?\n        !_this2.outsideClick || // did the consumer allow deactivation when the outside node was clicked?\n        _this2.outsideClick.allowDeactivation && // is the outside node NOT focusable (implying that it did NOT receive focus\n        //  as a result of the click-through) -- in which case do NOT restore focus\n        //  to `returnFocusNode` because focus should remain on the outside node\n        !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions)) // if no, the restore focus to `returnFocusNode` at this point\n        );\n        var _this2$internalOption = _this2.internalOptions.preventScroll,\n            preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n\n        if (canReturnFocus) {\n          // return focus to the element that had focus when the trap was activated\n          returnFocusNode.focus({\n            preventScroll: preventScroll\n          });\n        }\n\n        if (_this2.originalOptions.onPostDeactivate) {\n          _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n\n        }\n\n        _this2.outsideClick = null; // reset: no longer needed\n      };\n\n      if (this.originalOptions.checkCanReturnFocus) {\n        this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n        .then(finishDeactivation, finishDeactivation);\n      } else {\n        finishDeactivation();\n      }\n    }\n  }, {\n    key: \"setupFocusTrap\",\n    value: function setupFocusTrap() {\n      if (!this.focusTrap) {\n        var focusTrapElementDOMNodes = this.focusTrapElements.map( // NOTE: `findDOMNode()` does not support CSS selectors; it'll just return\n        //  a new text node with the text wrapped in it instead of treating the\n        //  string as a selector and resolving it to a node in the DOM\n        ReactDOM.findDOMNode);\n        var nodesExist = focusTrapElementDOMNodes.some(Boolean);\n\n        if (nodesExist) {\n          // eslint-disable-next-line react/prop-types -- _createFocusTrap is an internal prop\n          this.focusTrap = this.props._createFocusTrap(focusTrapElementDOMNodes, this.internalOptions);\n\n          if (this.props.active) {\n            this.focusTrap.activate();\n          }\n\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this.setupFocusTrap();\n      } // else, wait for later activation in case the `focusTrapOptions` will be updated\n      //  again before the trap is activated (e.g. if waiting to know what the document\n      //  object will be, so the Trap must be rendered, but the consumer is waiting to\n      //  activate until they have obtained the document from a ref)\n      //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.focusTrap) {\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrap.updateContainerElements(this.props.containerElements);\n        }\n\n        var hasActivated = !prevProps.active && this.props.active;\n        var hasDeactivated = prevProps.active && !this.props.active;\n        var hasPaused = !prevProps.paused && this.props.paused;\n        var hasUnpaused = prevProps.paused && !this.props.paused;\n\n        if (hasActivated) {\n          this.updatePreviousElement();\n          this.focusTrap.activate();\n        }\n\n        if (hasDeactivated) {\n          this.deactivateTrap();\n          return; // un/pause does nothing on an inactive trap\n        }\n\n        if (hasPaused) {\n          this.focusTrap.pause();\n        }\n\n        if (hasUnpaused) {\n          this.focusTrap.unpause();\n        }\n      } else {\n        // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n        //  it either means it shouldn't be active, or it should be but none of\n        //  of given `containerElements` were present in the DOM the last time\n        //  we tried to create the trap\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrapElements = this.props.containerElements;\n        } // don't create the trap unless it should be active in case the consumer\n        //  is still updating `focusTrapOptions`\n        //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n\n\n        if (this.props.active) {\n          this.updatePreviousElement();\n          this.setupFocusTrap();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n\n      if (child) {\n        if (child.type && child.type === React.Fragment) {\n          throw new Error('A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.');\n        }\n\n        var composedRefCallback = function composedRefCallback(element) {\n          var containerElements = _this3.props.containerElements;\n\n          if (child) {\n            if (typeof child.ref === 'function') {\n              child.ref(element);\n            } else if (child.ref) {\n              child.ref.current = element;\n            }\n          }\n\n          _this3.focusTrapElements = containerElements ? containerElements : [element];\n        };\n\n        var childWithRef = React.cloneElement(child, {\n          ref: composedRefCallback\n        });\n        return childWithRef;\n      }\n\n      return null;\n    }\n  }]);\n\n  return FocusTrap;\n}(React.Component); // support server-side rendering where `Element` will not be defined\n\n\nvar ElementType = typeof Element === 'undefined' ? Function : Element;\nFocusTrap.propTypes = {\n  active: PropTypes.bool,\n  paused: PropTypes.bool,\n  focusTrapOptions: PropTypes.shape({\n    document: PropTypes.object,\n    onActivate: PropTypes.func,\n    onPostActivate: PropTypes.func,\n    checkCanFocusTrap: PropTypes.func,\n    onDeactivate: PropTypes.func,\n    onPostDeactivate: PropTypes.func,\n    checkCanReturnFocus: PropTypes.func,\n    initialFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    fallbackFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, // NOTE: does not support `false` as value (or return value from function)\n    PropTypes.func]),\n    escapeDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    clickOutsideDeactivates: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    returnFocusOnDeactivate: PropTypes.bool,\n    setReturnFocus: PropTypes.oneOfType([PropTypes.instanceOf(ElementType), PropTypes.string, PropTypes.bool, PropTypes.func]),\n    allowOutsideClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    preventScroll: PropTypes.bool,\n    tabbableOptions: PropTypes.shape({\n      displayCheck: PropTypes.oneOf(['full', 'non-zero-area', 'none']),\n      getShadowRoot: PropTypes.oneOfType([PropTypes.bool, PropTypes.func])\n    })\n  }),\n  containerElements: PropTypes.arrayOf(PropTypes.instanceOf(ElementType)),\n  children: PropTypes.oneOfType([PropTypes.element, // React element\n  PropTypes.instanceOf(ElementType) // DOM element\n  ]) // NOTE: _createFocusTrap is internal, for testing purposes only, so we don't\n  //  specify it here. It's expected to be set to the function returned from\n  //  require('focus-trap'), or one with a compatible interface.\n\n};\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  _createFocusTrap: createFocusTrap\n};\nmodule.exports = FocusTrap;"],
  "mappings": "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",
  "names": ["candidateSelectors", "candidateSelector", "NoElement", "matches", "getRootNode", "getCandidates", "getCandidatesIteratively", "getTabindex", "sortOrderedTabbables", "isInput", "isHiddenInput", "isDetailsWithSummary", "getCheckedRadio", "isTabbableRadio", "isRadio", "isNonTabbableRadio", "isZeroArea", "isHidden", "isDisabledFromFieldset", "isNodeMatchingSelectorFocusable", "isNodeMatchingSelectorTabbable", "isValidShadowRootTabbable", "sortByOrder", "tabbable", "focusable", "isTabbable", "focusableCandidateSelector", "isFocusable", "join", "Element", "prototype", "msMatchesSelector", "webkitMatchesSelector", "element", "ownerDocument", "el", "includeContainer", "filter", "candidates", "Array", "slice", "apply", "querySelectorAll", "call", "unshift", "elements", "options", "elementsToCheck", "from", "length", "shift", "tagName", "assigned", "assignedElements", "content", "children", "nestedCandidates", "flatten", "push", "scope", "validCandidate", "includes", "shadowRoot", "getShadowRoot", "validShadowRoot", "shadowRootFilter", "node", "isScope", "tabIndex", "test", "isContentEditable", "isNaN", "parseInt", "getAttribute", "a", "b", "documentOrder", "type", "r", "some", "child", "nodes", "form", "i", "checked", "name", "radioScope", "queryRadios", "radioSet", "window", "CSS", "escape", "err", "console", "error", "message", "getBoundingClientRect", "width", "height", "displayCheck", "getComputedStyle", "visibility", "isDirectSummary", "nodeUnderDetails", "parentElement", "nodeRootHost", "host", "nodeIsAttached", "contains", "originalNode", "rootNode", "assignedSlot", "getClientRects", "parentNode", "disabled", "item", "shadowHostNode", "regularTabbables", "orderedTabbables", "forEach", "candidateTabindex", "sort", "reduce", "acc", "sortable", "concat", "bind", "Error", "activeFocusTraps", "isSelectableInput", "isEscapeEvent", "isTabEvent", "delay", "findIndex", "valueOrHandler", "getActualTarget", "createFocusTrap", "trapQueue", "activateTrap", "trap", "length", "activeTrap", "pause", "trapIndex", "indexOf", "push", "splice", "deactivateTrap", "unpause", "node", "tagName", "toLowerCase", "select", "e", "key", "keyCode", "fn", "setTimeout", "arr", "idx", "every", "value", "i", "params", "event", "target", "shadowRoot", "composedPath", "elements", "userOptions", "doc", "document", "config", "_objectSpread", "returnFocusOnDeactivate", "escapeDeactivates", "delayInitialFocus", "state", "containers", "containerGroups", "tabbableGroups", "nodeFocusedBeforeActivation", "mostRecentlyFocusedNode", "active", "paused", "delayInitialFocusTimer", "undefined", "getOption", "configOverrideOptions", "optionName", "configOptionName", "findContainerIndex", "element", "container", "tabbableNodes", "contains", "find", "getNodeForOption", "optionValue", "Error", "querySelector", "getInitialFocusNode", "activeElement", "firstTabbableGroup", "firstTabbableNode", "updateTabbableNodes", "map", "tabbable", "tabbableOptions", "focusableNodes", "focusable", "lastTabbableNode", "nextTabbableNode", "forward", "nodeIdx", "n", "slice", "isTabbable", "reverse", "filter", "group", "tryFocus", "focus", "preventScroll", "getReturnFocusNode", "previousActiveElement", "checkPointerDown", "clickOutsideDeactivates", "deactivate", "returnFocus", "isFocusable", "allowOutsideClick", "preventDefault", "checkFocusIn", "targetContained", "Document", "stopImmediatePropagation", "checkTab", "destinationNode", "containerIndex", "containerGroup", "shiftKey", "startOfGroupIndex", "destinationGroupIndex", "destinationGroup", "lastOfGroupIndex", "checkKey", "checkClick", "addListeners", "addEventListener", "capture", "passive", "removeListeners", "removeEventListener", "activate", "activateOptions", "onActivate", "onPostActivate", "checkCanFocusTrap", "finishActivation", "concat", "then", "deactivateOptions", "options", "onDeactivate", "onPostDeactivate", "checkCanReturnFocus", "clearTimeout", "finishDeactivation", "updateContainerElements", "containerElements", "elementsAsArray", "Boolean", "import_dist", "obj", "_setPrototypeOf", "o", "p", "_getPrototypeOf", "_defineProperty", "createFocusTrap", "isFocusable", "FocusTrap", "optionName", "finishDeactivation", "composedRefCallback"]
}
