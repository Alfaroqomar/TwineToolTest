import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-KI2BRAH6.js";

// node_modules/segseg/index.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());

// node_modules/segseg/segpoint.js
var import_dist = __toESM(require_dist(), 1);
var import_dist2 = __toESM(require_dist2(), 1);
var import_dist3 = __toESM(require_dist3(), 1);
function sqr(x) {
  return x * x;
}
function dist2(v, w) {
  return sqr(v[0] - w[0]) + sqr(v[1] - w[1]);
}
function distToSegmentSquared(p, v, w) {
  const l2 = dist2(v, w);
  if (l2 === 0)
    return dist2(p, v);
  let t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;
  t = Math.max(0, Math.min(1, t));
  return dist2(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);
}
function distToSegment(p, t0, t1) {
  return Math.sqrt(distToSegmentSquared(p, t0, t1)) < 1;
}

// node_modules/segseg/index.js
var DONT_INTERSECT = 0;
var DO_INTERSECT = 1;
var COLINEAR = 2;
function _segseg(out, p1, p2, p3, p4) {
  let x1 = p1[0];
  let y1 = p1[1];
  let x2 = p2[0];
  let y2 = p2[1];
  let x3 = p3[0];
  let y3 = p3[1];
  let x4 = p4[0];
  let y4 = p4[1];
  let a1, a2, b1, b2, c1, c2;
  let r1, r2, r3, r4;
  let denom, offset;
  let x, y;
  a1 = y2 - y1;
  b1 = x1 - x2;
  c1 = x2 * y1 - x1 * y2;
  r3 = a1 * x3 + b1 * y3 + c1;
  r4 = a1 * x4 + b1 * y4 + c1;
  if (r3 !== 0 && r4 !== 0 && (r3 >= 0 && r4 >= 0 || r3 < 0 && r4 < 0))
    return DONT_INTERSECT;
  a2 = y4 - y3;
  b2 = x3 - x4;
  c2 = x4 * y3 - x3 * y4;
  r1 = a2 * x1 + b2 * y1 + c2;
  r2 = a2 * x2 + b2 * y2 + c2;
  if (r1 !== 0 && r2 !== 0 && (r1 >= 0 && r2 >= 0 || r1 < 0 && r2 < 0))
    return DONT_INTERSECT;
  denom = a1 * b2 - a2 * b1;
  if (denom === 0)
    return COLINEAR;
  offset = denom < 0 ? -denom / 2 : denom / 2;
  x = b1 * c2 - b2 * c1;
  y = a2 * c1 - a1 * c2;
  out[0] = (x < 0 ? x : x) / denom;
  out[1] = (y < 0 ? y : y) / denom;
  return DO_INTERSECT;
}
function segseg(out, p1, p2, p3, p4) {
  const result = _segseg(out, p1, p2, p3, p4);
  if (result === DO_INTERSECT)
    return result;
  if (distToSegment(p1, p3, p4)) {
    out[0] = p1[0];
    out[1] = p1[1];
    return true;
  }
  if (distToSegment(p2, p3, p4)) {
    out[0] = p2[0];
    out[1] = p2[1];
    return true;
  }
  if (distToSegment(p3, p1, p2)) {
    out[0] = p3[0];
    out[1] = p3[1];
    return true;
  }
  if (distToSegment(p4, p1, p2)) {
    out[0] = p4[0];
    out[1] = p4[1];
    return true;
  }
  return false;
}
export {
  segseg as default
};
//# sourceMappingURL=segseg.js.map
