{
  "version": 3,
  "sources": ["../../segseg/index.js", "../../segseg/segpoint.js"],
  "sourcesContent": ["import segpoint from './segpoint.js'\n\n\nconst DONT_INTERSECT = 0\nconst DO_INTERSECT = 1\nconst COLINEAR = 2\n\n\n/*  Ported from Mukesh Prasad's public domain code:\n *    http://www.realtimerendering.com/resources/GraphicsGems/gemsii/xlines.c\n *\n *   This function computes whether two line segments,\n *   respectively joining the input points (x1,y1) -- (x2,y2)\n *   and the input points (x3,y3) -- (x4,y4) intersect.\n *   If the lines intersect, the return value is an array\n *   containing coordinates of the point of intersection.\n *\n *   Params\n *        p1, p2   Coordinates of endpoints of one segment.\n *        p3, p4   Coordinates of endpoints of other segment.\n *\n *   The value returned by the function is an enumeration of DONT_INTERSECT | DO_INTERSECT | COLINEAR\n */\n\nfunction _segseg (out, p1, p2, p3, p4) {\n  let x1 = p1[0]\n  let y1 = p1[1]\n  let x2 = p2[0]\n  let y2 = p2[1]\n  let x3 = p3[0]\n  let y3 = p3[1]\n  let x4 = p4[0]\n  let y4 = p4[1]\n\n  let a1, a2, b1, b2, c1, c2 // Coefficients of line eqns.\n  let r1, r2, r3, r4         // 'Sign' values\n  let denom, offset          // Intermediate values\n  let x, y                   // Intermediate return values\n\n  // Compute a1, b1, c1, where line joining points 1 and 2\n  // is \"a1 x  +  b1 y  +  c1  =  0\".\n  a1 = y2 - y1\n  b1 = x1 - x2\n  c1 = x2 * y1 - x1 * y2\n\n  // Compute r3 and r4.\n  r3 = a1 * x3 + b1 * y3 + c1\n  r4 = a1 * x4 + b1 * y4 + c1\n\n  // Check signs of r3 and r4.  If both point 3 and point 4 lie on\n  // same side of line 1, the line segments do not intersect.\n  if ( r3 !== 0 && r4 !== 0 && ((r3 >= 0 && r4 >= 0) || (r3 < 0 && r4 < 0)))\n    return DONT_INTERSECT\n\n  // Compute a2, b2, c2\n  a2 = y4 - y3\n  b2 = x3 - x4\n  c2 = x4 * y3 - x3 * y4\n\n  // Compute r1 and r2\n  r1 = a2 * x1 + b2 * y1 + c2\n  r2 = a2 * x2 + b2 * y2 + c2\n\n  // Check signs of r1 and r2.  If both point 1 and point 2 lie\n  // on same side of second line segment, the line segments do\n  // not intersect.\n  if (r1 !== 0 && r2 !== 0 && ((r1 >= 0 && r2 >= 0) || (r1 < 0 && r2 < 0)))\n    return DONT_INTERSECT\n\n  // Line segments intersect: compute intersection point.\n  denom = a1 * b2 - a2 * b1\n\n  if (denom === 0)\n    return COLINEAR\n\n  offset = denom < 0 ? - denom / 2 : denom / 2\n\n  x = b1 * c2 - b2 * c1\n  y = a2 * c1 - a1 * c2\n\n  out[0] = ( x < 0 ? x : x ) / denom\n  out[1] = ( y < 0 ? y : y ) / denom\n  \n  return DO_INTERSECT\n}\n\n\nexport default function segseg (out, p1, p2, p3, p4) {\n  const result = _segseg(out, p1, p2, p3, p4)\n\n  if (result === DO_INTERSECT)\n    return result\n\n  // handle colinear cases and when a line segment endpoint lies on the other segment\n  if (segpoint(p1, p3, p4)) {\n    out[0] = p1[0]\n    out[1] = p1[1]\n    return true\n  }\n\n  if (segpoint(p2, p3, p4)) {\n    out[0] = p2[0]\n    out[1] = p2[1]\n    return true\n  }\n\n  if (segpoint(p3, p1, p2)) {\n    out[0] = p3[0]\n    out[1] = p3[1]\n    return true\n  }\n\n  if (segpoint(p4, p1, p2)) {\n    out[0] = p4[0]\n    out[1] = p4[1]\n    return true\n  }\n\n  return false\n}\n", "// from https://gist.github.com/mattdesl/47412d930dcd8cd765c871a65532ffac\n\nfunction sqr (x) {\n  return x * x\n}\n\n\nfunction dist2 (v, w) {\n  return sqr(v[0] - w[0]) + sqr(v[1] - w[1])\n}\n\n\n// p - point\n// v - start point of segment\n// w - end point of segment\nfunction distToSegmentSquared (p, v, w) {\n  const l2 = dist2(v, w)\n  if (l2 === 0)\n      return dist2(p, v)\n\n  let t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2\n  t = Math.max(0, Math.min(1, t))\n  return dist2(p, [ v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1]) ])\n}\n\n\n// p - point\n// t0 - start point of segment\n// t1 - end point of segment\n// return boolean indicating if p is on the segment\nexport default function distToSegment (p, t0, t1) {\n  return Math.sqrt(distToSegmentSquared(p, t0, t1)) < 1\n}\n"],
  "mappings": "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",
  "names": ["import_dist", "import_dist"]
}
